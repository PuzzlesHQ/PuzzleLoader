plugins {
    id 'java'
    id 'maven-publish'
    id 'jigsaw'
    id 'com.github.johnrengelman.shadow'
}

group = 'com.github.PuzzlesHQ'

repositories {
    mavenCentral()
    maven { url "https://libraries.minecraft.net" }
    maven {
        url = "https://jitpack.io"
    }
    maven {
        name = "meteor-maven"
        url = "https://maven.meteordev.org/releases"
    }
}

sourceSets {
    loader
}

loom {
    splitEnvironmentSourceSets()
    accessWidenerPath = file("src/main/resources/puzzle_loader.manipulator")

    mods {
        "puzzle-loader" {
            sourceSet sourceSets.main
            sourceSet sourceSets.client
            sourceSet sourceSets.loader
        }
    }

}

configurations {
    allBundleBase

    bundle.extendsFrom(allBundleBase)
    implementation.extendsFrom(allBundleBase)
    clientImplementation.extendsFrom(allBundleBase)
    testImplementation.extendsFrom(allBundleBase)

    allBundle

    bundle.extendsFrom(allBundle)
    implementation.extendsFrom(allBundle)
    clientImplementation.extendsFrom(allBundle)
    loaderImplementation.extendsFrom(allBundle)
    testImplementation.extendsFrom(allBundle)
}

dependencies {
    compileOnly('org.jetbrains:annotations:24.0.0')
    loaderCompileOnly('org.jetbrains:annotations:24.0.0')

    cosmicReach("finalforeach:cosmicreach-alpha:${cosmic_reach_client_version}")
    allBundle(annotationProcessor("io.github.llamalad7:mixinextras-fabric:$mixinExtrasVersion"))

    allBundle("com.google.guava:guava:$guavaVersion")
    allBundle("com.google.code.gson:gson:$gsonVersion")
    allBundle("org.hjson:hjson:$hjsonVersion")
    bundle("com.mojang:brigadier:$brigadierVersion")

    allBundle("org.apache.logging.log4j:log4j-api:$log4jVersion")
    allBundle("org.apache.logging.log4j:log4j-core:$log4jVersion")
    allBundle("org.apache.logging.log4j:log4j-slf4j2-impl:$log4jVersion")

    allBundle("net.sf.jopt-simple:jopt-simple:$joptSimpleVersion")
    allBundle("org.reflections:reflections:$reflectionsVersion")
    allBundle("meteordevelopment:orbit:$eventbusVersion")

    // ASM
    allBundle("org.ow2.asm:asm:$asmVersion")
    allBundle("org.ow2.asm:asm-tree:$asmVersion");
    allBundle("org.ow2.asm:asm-util:$asmVersion");
    allBundle("org.ow2.asm:asm-analysis:$asmVersion");
    allBundle("org.ow2.asm:asm-commons:$asmVersion");

    allBundle("net.fabricmc:sponge-mixin:$mixinVersion");
    allBundle("com.github.PuzzleLoader:access_manipulators:$accessManipulatorsVersion")

    allBundle("org.jline:jline:3.25.0") // Maybe Remove
    bundle("org.apache.commons:commons-lang3:3.17.0")
    bundle("org.fusesource.jansi:jansi:2.2.0"){
        exclude(group: "org.apache.commons", module: "commons-lang3") // use higher version above for paradox compat
    }

    allBundleBase(sourceSets.loader.output)
}

processResources {
    def resourceTargets = ["assets/puzzle-loader/version.txt"]

    String ver = version
    if (!ver.contains(".")) {
        ver = "69.69.69"
    } else ver = (version + "").replaceAll((version + "").replaceAll("[\\d\\.]", ""), "")

    def replaceProperties = [
            "version"     : ver,
    ]


    inputs.properties replaceProperties
    replaceProperties.put "project", project
    filesMatching(resourceTargets) {
        expand replaceProperties
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId = group
            artifactId = id

            artifact source: buildMergedBundleJar, classifier: 'client', extension: 'jar'
            artifact source: buildServerBundleJar, classifier: 'server', extension: 'jar'
        }
    }
}

wrapper {
    gradleVersion = "8.5"
    distributionType = Wrapper.DistributionType.ALL
}